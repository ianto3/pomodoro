{"version":3,"sources":["components/SetTimer.js","hooks/useInterval.js","components/Timer.js","App.js","reportWebVitals.js","index.js"],"names":["SessionControls","time","incrementFunc","decrementFunc","timerIsRunning","className","onClick","disabled","src","process","alt","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Timer","sessionLength","breakLength","isTimerRunning","sessionTime","breakTime","timerIndicator","document","querySelector","useState","play","setPlay","minutes","setMinutes","seconds","setSeconds","phase","setPhase","totalDeg","setTotalDeg","mute","setMute","Audio","audio","pad","num","keypress","ev","key","window","addEventListener","removeEventListener","classList","add","remove","title","prevMin","prevSec","totalTime","degreeTick","newDegPosition","style","transform","prevTotalDeg","rotateOrb","color","App","setSessionLength","setBreakLength","setTimerIsRunning","bool","SetTimer","prevLength","prevBreak","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5a738bc8.chunk.js","sourcesContent":["import React from 'react'\n\nconst SessionControls = ({ time, incrementFunc, decrementFunc, timerIsRunning }) => {\n    return (\n        <div className=\"timer-controls\">\n            <button className=\"increment-button\" aria-label=\"increment value\" onClick={incrementFunc} disabled={timerIsRunning}>\n                <img src={process.env.PUBLIC_URL + `/assets/icons/up-arrow.svg`} alt=\"Up arrow\" />\n            </button>\n            <span className=\"time-set\">{time}</span>\n            <button className=\"decrement-button\" aria-label=\"decrement value\" onClick={decrementFunc} disabled={timerIsRunning}>\n                <img src={process.env.PUBLIC_URL + `/assets/icons/down-arrow.svg`} alt=\"Down arrow\" />\n            </button>\n        </div>\n    )\n}\n\nexport default SessionControls\n","import { useEffect, useRef } from 'react'\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    useEffect(() => {\n        savedCallback.current = callback;\n    });\n\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nexport default useInterval\n\n","import React, { useState, useEffect } from 'react';\nimport useInterval from '../hooks/useInterval';\n\nconst Timer = ({ sessionLength, breakLength, isTimerRunning }) => {\n\n    const sessionTime = \"Session\";\n    const breakTime = \"Break\";\n    const timerIndicator = document.querySelector(\".time-indicator\");\n\n    const [play, setPlay] = useState(false);\n    const [minutes, setMinutes] = useState(sessionLength);\n    const [seconds, setSeconds] = useState(0);\n    const [phase, setPhase] = useState(sessionTime);\n    const [totalDeg, setTotalDeg] = useState(0);\n    const [mute, setMute] = useState(false);\n    const [audio] = useState(new Audio(process.env.PUBLIC_URL + \"/assets/sounds/alarm.mp3\"));\n\n\n    // Add 0 before digit if needed for display.\n    const pad = (num) => {\n        return num < 10 ? \"0\" + num : num;\n    }\n\n\n    const rotateOrb = (phase, minutes, seconds) => {\n        const totalTime = (phase === sessionTime ? sessionLength : breakLength) * 60;\n        const degreeTick = 360 / totalTime;\n        const timeElapsed = totalTime - (minutes * 60 + seconds) + 1;\n        const newDegPosition = timeElapsed * degreeTick + degreeTick / 2;\n\n        if (newDegPosition >= 360) {\n            timerIndicator.style.transform = `rotate(${totalDeg + 360}deg)`;\n        } else {\n            timerIndicator.style.transform = `rotate(${totalDeg + newDegPosition}deg)`;\n        }\n\n        // Keep adding degrees to avoid counterclockwise animation to reset degrees each turn.\n        if (minutes === 0 && seconds === 0) {\n            setTotalDeg(prevTotalDeg => prevTotalDeg + 360);\n        }\n    }\n\n\n    // Toggle play with spacebar.\n    const keypress = (ev) => {\n        if (ev.key === \" \") {\n            setPlay(!play);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener(\"keydown\", keypress);\n        return () => {\n            window.removeEventListener(\"keydown\", keypress);\n        }\n    })\n\n\n    // Control deactivation of timer settings controls while running countdown.\n    useEffect(() => {\n        if (play) {\n            isTimerRunning(true);\n            // Enable timer pulse animation\n            timerIndicator.classList.add(\"active\");\n        } else {\n            isTimerRunning(false);\n            // Condition avoids error on loading component since element is null at mount.\n            if (timerIndicator) {\n                timerIndicator.classList.remove(\"active\");\n            }\n        }\n    }, [play, isTimerRunning, timerIndicator])\n\n\n    // Reflects time in title while running\n    useEffect(() => {\n        if (play) {\n            document.title = `Pomodoro: ${pad(minutes)}:${pad(seconds)}`\n        } else {\n            document.title = \"Pomodoro Timer\"\n        }\n    }, [play, minutes, seconds]);\n\n\n    // Handle dynamic changes to settings.\n    useEffect(() => {\n        if (phase === sessionTime) {\n            setMinutes(sessionLength);\n            setSeconds(0);\n        }\n    }, [sessionLength, phase])\n\n    useEffect(() => {\n        if (phase === breakTime) {\n            setMinutes(breakLength);\n            setSeconds(0);\n        }\n    }, [breakLength, phase])\n\n\n    const counter = () => {\n        if (seconds === 0) {\n            if (minutes > 0) {\n                setMinutes(prevMin => prevMin - 1);\n                setSeconds(59);\n            } else {\n                if (phase === sessionTime) {\n                    setPhase(breakTime);\n                    setMinutes(breakLength);\n                } else {\n                    setPhase(sessionTime);\n                    setMinutes(sessionLength);\n                }\n                if (!mute) {\n                    audio.play();\n                }\n            }\n        } else {\n            setSeconds(prevSec => prevSec - 1);\n        }\n        rotateOrb(phase, minutes, seconds);\n    }\n\n    useInterval(counter, play ? 1000 : null);\n\n    // Handle timer reset.\n    const reset = () => {\n        setPlay(false);\n        setPhase(sessionTime);\n        setMinutes(sessionLength);\n        setSeconds(0);\n        if (timerIndicator) {\n            timerIndicator.style.transform = `rotate(${totalDeg}deg)`;\n        }\n    }\n\n\n    return (\n        <>\n            <div className=\"time-display\">\n                <div className=\"time-indicator\"></div>\n                <span className=\"time-phase\" style={{ color: phase === sessionTime ? \"rgb(226,121,0)\" : \"rgb(0,255,255)\" }}>{phase}</span>\n                {(minutes === 0 && seconds <= 10)\n                    ? <span className=\"time final-countdown\">{seconds}</span>\n                    : <span className=\"time\">{pad(minutes)}:{pad(seconds)}</span>}\n            </div>\n            <div className=\"timer-btns\">\n                <button className=\"play-btn\" aria-label=\"toggle play\" onClick={() => setPlay(!play)}>\n                    <img src={process.env.PUBLIC_URL + `/assets/icons/${play ? \"pause\" : \"play\"}.svg`} alt={play ? \"pause\" : \"play\"} />\n                </button>\n                <button className=\"reset-btn\" aria-label=\"reset\" onClick={reset}>\n                    <img src={process.env.PUBLIC_URL + `/assets/icons/reset.svg`} alt=\"reset\" />\n                </button>\n            </div>\n            <p className=\"key-instructions\">\n                Press <kbd>Space</kbd> to toggle the countdown!\n            </p>\n            <button className=\"mute-btn\" aria-label=\"toggle mute\" onClick={() => setMute(!mute)}>\n                <img src={process.env.PUBLIC_URL + `/assets/icons/${mute ? \"volume-off\" : \"volume-on\"}.svg`} alt={mute ? \"Sound muted\" : \"Sound on\"} />\n            </button>\n\n        </>\n    )\n}\n\nexport default Timer\n","import React, { useState } from 'react';\nimport SetTimer from \"./components/SetTimer\";\nimport Timer from \"./components/Timer\";\n\n\nfunction App() {\n\n  const [sessionLength, setSessionLength] = useState(20);\n  const [breakLength, setBreakLength] = useState(5);\n  const [timerIsRunning, setTimerIsRunning] = useState(false);\n\n  const addSessionLength = () => {\n    if (sessionLength < 60) {\n      setSessionLength(prevLength => prevLength + 1);\n    }\n  }\n\n  const reduceSessionLength = () => {\n    if (sessionLength > 1) {\n      setSessionLength(prevLength => prevLength - 1);\n    }\n  }\n\n  const addBreakLength = () => {\n    if (breakLength < 60) {\n      setBreakLength(prevBreak => prevBreak + 1);\n    }\n  }\n\n  const reduceBreakLength = () => {\n    if (breakLength > 1) {\n      setBreakLength(prevBreak => prevBreak - 1)\n    }\n  }\n\n  const isTimerRunning = (bool) => {\n    if (typeof bool == \"boolean\") {\n      setTimerIsRunning(bool);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"container\">\n        <h1>\n          Pomodoro Timer\n        </h1>\n      </header>\n\n      <main className=\"container\">\n        <div className=\"timer\">\n          <Timer sessionLength={sessionLength} breakLength={breakLength} isTimerRunning={isTimerRunning} />\n        </div>\n        <div className=\"settings-controllers\">\n          <div className=\"settings-group\">\n            <h3>Session Length</h3>\n            <SetTimer time={sessionLength} incrementFunc={addSessionLength} decrementFunc={reduceSessionLength} timerIsRunning={timerIsRunning} />\n          </div>\n          <div className=\"settings-group\">\n            <h3>Break Length</h3>\n            <SetTimer time={breakLength} incrementFunc={addBreakLength} decrementFunc={reduceBreakLength} timerIsRunning={timerIsRunning} />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}